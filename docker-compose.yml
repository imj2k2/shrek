services:
  backend:
    build: .
    ports:
      - "8080:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - POLYGON_API_KEY=${POLYGON_API_KEY:-demo}
      - POLYGON_S3_ACCESS_KEY=${POLYGON_S3_ACCESS_KEY:-${POLYGON_API_KEY:-demo}}
      - POLYGON_S3_SECRET_KEY=${POLYGON_S3_SECRET_KEY:-${POLYGON_API_KEY:-demo}}
      - POLYGON_S3_FALLBACK=${POLYGON_S3_FALLBACK:-true}
      - ALPACA_API_KEY=${ALPACA_API_KEY:-demo}
      - ALPACA_API_SECRET=${ALPACA_API_SECRET:-demo}
      - BROKER_TYPE=${BROKER_TYPE:-mock}
      - DEBUG_TRADING=${DEBUG_TRADING:-true}
      - DB_PATH=/app/data/db/market_data.db
      - OTEL_ENABLED=${OTEL_ENABLED:-false}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-shrek-backend}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-postgres}
      - TIMESCALE_HOST=${TIMESCALE_HOST:-timescaledb}
      - TIMESCALE_PORT=${TIMESCALE_PORT:-5432}
      - TIMESCALE_DB=${TIMESCALE_DB:-shrek}
    volumes:
      - market-data:/app/data/db
    depends_on:
      - redis
    restart: on-failure
    command: >-
      bash -c "python -m monitoring.telemetry && uvicorn main:app --host 0.0.0.0 --port 8000"

  gradio:
    build: .
    command: python -m ui.gradio_app
    ports:
      - "7860:7860"
    environment:
      - API_BASE_URL=http://backend:8000
      - POLYGON_API_KEY=${POLYGON_API_KEY:-demo}
      - POLYGON_S3_ACCESS_KEY=${POLYGON_S3_ACCESS_KEY:-${POLYGON_API_KEY:-demo}}
      - POLYGON_S3_SECRET_KEY=${POLYGON_S3_SECRET_KEY:-${POLYGON_API_KEY:-demo}}
      - POLYGON_S3_FALLBACK=${POLYGON_S3_FALLBACK:-true}
      - ALPACA_API_KEY=${ALPACA_API_KEY:-demo}
      - ALPACA_API_SECRET=${ALPACA_API_SECRET:-demo}
      - BROKER_TYPE=${BROKER_TYPE:-mock}
      - DEBUG_TRADING=${DEBUG_TRADING:-true}
      - DB_PATH=/app/data/db/market_data.db
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-postgres}
      - TIMESCALE_HOST=${TIMESCALE_HOST:-timescaledb}
      - TIMESCALE_PORT=${TIMESCALE_PORT:-5432}
      - TIMESCALE_DB=${TIMESCALE_DB:-shrek}
    volumes:
      - market-data:/app/data/db
    depends_on:
      - backend
    restart: on-failure

  react-ui:
    build:
      context: ./ui/react-ui
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_WS_HOST=backend
      - REACT_APP_WS_PORT=8000
    depends_on:
      - backend
    restart: on-failure

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: on-failure

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=${TIMESCALE_USER:-postgres}
      - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD:-postgres}
      - POSTGRES_DB=${TIMESCALE_DB:-shrek}
    ports:
      - "5432:5432"
    volumes:
      - timescale-data:/var/lib/postgresql/data
    restart: on-failure

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8888:8888" # Prometheus metrics endpoint
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel/config.yaml
    command: ["--config=/etc/otel/config.yaml"]
    restart: on-failure

volumes:
  redis-data:
  market-data:
  timescale-data:
